isRandom=TRUE,
interval=interval_HMC)
data1 <- data.frame(iteration=1:N, x=result1$q[, 100])
data2 <- data.frame(iteration=1:N, x=result2$q[, 100])
p1 <- ggplot() +
theme_bw() +
theme(panel.grid = element_blank()) +
geom_point(data=data1,
aes(x=iteration, y=x),
size=1) +
ylim(-3, 3) +
labs(title = 'Random-walk Metropolis',
x='iteration',
y='last position coordinate')+
theme(plot.title = element_text(size = 15, hjust = 0.5),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12),
panel.grid = element_blank(),
legend.position="none")
p2 <- ggplot() +
theme_bw() +
theme(panel.grid = element_blank()) +
geom_point(data=data2,
aes(x=iteration, y=x),
size=1) +
ylim(-3, 3) +
labs(title = 'Hamiltonian Monte Carlo',
x='iteration',
y='last position coordinate')+
theme(plot.title = element_text(size = 15, hjust = 0.5),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12),
panel.grid = element_blank(),
legend.position="none")
p1+p2
CompareMean <- data.frame(Sigma=Sigma,
MH=colMeans(result1$q),
HMC=colMeans(result2$q))
CompareSd <- data.frame(Sigma=Sigma,
MH=apply(result1$q, 2, sd),
HMC=apply(result2$q, 2, sd))
p1 <- ggplot(CompareMean, aes(x=Sigma, y=MH)) +
theme_bw() +
theme(panel.grid = element_blank()) +
geom_point(size=1) +
geom_hline(yintercept=0) +
ylim(-1, 1) +
labs(title = 'Random-walk Metropolis',
x='standard deviation of coordinate',
y='sample mean of coordinate')+
theme(plot.title = element_text(size = 15, hjust = 0.5),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12),
panel.grid = element_blank(),
legend.position="none")
p2 <- ggplot(CompareMean, aes(x=Sigma, y=HMC)) +
theme_bw() +
theme(panel.grid = element_blank()) +
geom_point(size=1) +
geom_hline(yintercept=0) +
ylim(-1, 1) +
labs(title = 'Hamiltonian Monte Carlo',
x='standard deviation of coordinate',
y='sample mean of coordinate')+
theme(plot.title = element_text(size = 15, hjust = 0.5),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12),
panel.grid = element_blank(),
legend.position="none")
p3 <- ggplot(CompareSd, aes(x=Sigma, y=MH)) +
theme_bw() +
theme(panel.grid = element_blank()) +
geom_point(size=1) +
geom_abline(slope=1, intercept=0) +
ylim(0, 1.2) +
labs(title = 'Random-walk Metropolis',
x='standard deviation of coordinate',
y='sample standard deviation of coordinate')+
theme(plot.title = element_text(size = 15, hjust = 0.5),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12),
panel.grid = element_blank(),
legend.position="none")
p4 <- ggplot(CompareSd, aes(x=Sigma, y=HMC)) +
theme_bw() +
theme(panel.grid = element_blank()) +
geom_point(size=1) +
geom_abline(slope=1, intercept=0) +
ylim(0, 1.2) +
labs(title = 'Hamiltonian Monte Carlo',
x='standard deviation of coordinate',
y='sample standard deviation of coordinate')+
theme(plot.title = element_text(size = 15, hjust = 0.5),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12),
panel.grid = element_blank(),
legend.position="none")
set.seed(20241206)
n <- 1000
y <- rnorm(n, 1, 5)
set.seed(20241206)
n <- 1000
y <- rnorm(n, 1, 5)
y_sum <- sum(y)
logTarget <- function(theta) {
return((theta[1]+theta[2]^2) * y_sum / 25 - n*(theta[1]+theta[2]^2)^2/50 - sum(theta^2) / 2)
}
glogTarget <- function(theta) {
g1 <- y_sum/25 - n*(theta[1]+theta[2]^2)/25-theta[1]
g2 <- 2*theta[2]*y_sum/25-2*n*theta[2]*(theta[1]+theta[2]^2)/25-theta[2]
return(c(g1, g2))
}
set.seed(20241208)
theta_init <- c(0, 0)
result_MH <- MH(N=200,
q_init=theta_init,
sigma=0.05,
L=20,
logTarget=logTarget)
result_MALA <- MALA(N=200,
q_init=theta_init,
sigma=0.05,
L=20,
logTarget=logTarget,
glogTarget=glogTarget)
result_HMC <- HMC(N=200,
q_init=theta_init,
delta=0.05,
L=20,
logTarget=logTarget,
glogTarget=glogTarget)
result_NUTS <- NUTS(N=200,
q_init=theta_init,
delta=0.05,
logTarget=logTarget,
glogTarget=glogTarget)
data_MH <- data.frame(result_MH$q)
colnames(data_MH) <- c("theta1", "theta2")
data_MALA <- data.frame(result_MALA$q)
colnames(data_MALA) <- c("theta1", "theta2")
data_HMC <- data.frame(result_HMC$q)
colnames(data_HMC) <- c("theta1", "theta2")
data_NUTS <- data.frame(result_NUTS)
colnames(data_NUTS) <- c("theta1", "theta2")
Target <- function(theta1, theta2) {
return(exp((theta1+theta2^2) * y_sum / 25 - n*(theta1+theta2^2)^2/50 - (theta1^2+theta2^2) / 2))
}
theta1 <- seq(-2, 2, length.out=200)
theta2 <- seq(-2, 2, length.out=200)
z <- outer(theta1, theta2, Target)
df <- data.frame(theta1=rep(theta1, times=200),
theta2=rep(theta2, each=200),
z=as.vector(z))
figure_target <- ggplot() +
theme_bw() +
geom_raster(data=df, aes(x=theta1,y=theta2,fill=z),interpolate=TRUE) +
scale_fill_gradientn(colors=brewer.pal(8, 'Blues')) +
labs(title='density', x='theta1', y='theta2', fill='density') +
xlim(-2, 2) +
ylim(-2, 2) +
theme(plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "#F7FBFF")) +
theme(plot.title = element_text(size = 15, hjust = 0.5),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12),
panel.grid = element_blank(),
legend.position="none")
figure_MH <- figure_target +
geom_point(data=data_MH,
aes(x=theta1, y=theta2),
size=0.5,
color="#FF7F00") +
labs(title = "MH")
figure_MALA <- figure_target +
geom_point(data=data_MALA,
aes(x=theta1, y=theta2),
size=0.5,
color="#FF7F00") +
labs(title = "MALA")
figure_HMC <- figure_target +
geom_point(data=data_HMC,
aes(x=theta1, y=theta2),
size=0.5,
color="#FF7F00") +
labs(title = "HMC")
figure_NUTS <- figure_target +
geom_point(data=data_NUTS,
aes(x=theta1, y=theta2),
size=0.5,
color="#FF7F00") +
labs(title = "NUTS")
(figure_MH + figure_MALA) / (figure_HMC + figure_NUTS)
ls()
gc()
devtools::check()
devtools::document()
devtools::check()
devtools::build_vignettes()
remove.packages("SA24204142")
devtools::build_vignettes()
devtools::build(vignettes=FALSE)
install.packages('../StatComp_1.3.tar.gz',repo=NULL)
install.packages('../SA24204142_1.3.tar.gz',repo=NULL)
knitr::opts_chunk$set(echo = TRUE)
library(SA24204142)
library(ggplot2)
library(RColorBrewer)
Sigma <- matrix(c(1,0.98,0.98,1), 2, 2)
InvSigma <- solve(Sigma)
logTarget <- function(x) {
- t(x) %*% InvSigma %*% x / 2
}
result <- MH(10000, c(1, 0), 0.18, 20, logTarget)
plot(result$q, xlab="x", ylab="y")
Sigma <- matrix(c(1,0.98,0.98,1), 2, 2)
InvSigma <- solve(Sigma)
logTarget <- function(x) {
- t(x) %*% InvSigma %*% x / 2
}
glogTarget <- function(x) {
- InvSigma %*% x
}
result <- MALA(10000, c(1, 0), 0.18, 20, logTarget, glogTarget)
plot(result$q, xlab="x", ylab="y")
Sigma <- matrix(c(1,0.98,0.98,1), 2, 2)
InvSigma <- solve(Sigma)
logTarget <- function(x) {
- t(x) %*% InvSigma %*% x / 2
}
glogTarget <- function(x) {
- InvSigma %*% x
}
result <- HMC(10000, c(1, 0), 0.18, 20, logTarget, glogTarget)
plot(result$q, xlab="x", ylab="y")
Sigma <- matrix(c(1,0.98,0.98,1), 2, 2)
InvSigma <- solve(Sigma)
logTarget <- function(x) {
- t(x) %*% InvSigma %*% x / 2
}
glogTarget <- function(x) {
- InvSigma %*% x
}
result <- NUTS(10000, c(1, 0), 0.18, logTarget, glogTarget)
plot(result, xlab="x", ylab="y")
Sigma <- seq(0.01, 1, 0.01)
InvSigma <- 1/Sigma
InvSigma2 <- InvSigma^2
logTarget <- function(x) {
-sum(x^2*InvSigma2)/2
}
glogTarget <- function(x){
return(-InvSigma2*x)
}
N <- 1000
L <- 150
interval_HMC <- c(0.8*0.013, 1.2*0.013)
interval_HM <- c(0.8*0.022, 1.2*0.022)
set.seed(20241205)
RejectionRate <- matrix(nrow=10, ncol=2)
for (i in 1:10) {
q_init <- rnorm(100)
RejectionRate[i, 1] <- MH(N=N,
q_init=q_init,
L=L,
logTarget=logTarget,
isRandom=TRUE,
interval=interval_HM)$k/N/L
RejectionRate[i, 2] <- HMC(N=N,
q_init=q_init,
L=L,
logTarget=logTarget,
glogTarget=glogTarget,
isRandom=TRUE,
interval=interval_HMC)$k/N
}
colMeans(RejectionRate) # 0.748, 0.128
set.seed(20241205)
q_init <- rep(0.5, 100)
result1 <- MH(N=N,
q_init=q_init,
L=L,
logTarget=logTarget,
isRandom=TRUE,
interval=interval_HM)
result2 <- HMC(N=N,
q_init=q_init,
L=L,
logTarget=logTarget,
glogTarget=glogTarget,
isRandom=TRUE,
interval=interval_HMC)
data1 <- data.frame(iteration=1:N, x=result1$q[, 100])
data2 <- data.frame(iteration=1:N, x=result2$q[, 100])
p1 <- ggplot() +
theme_bw() +
theme(panel.grid = element_blank()) +
geom_point(data=data1,
aes(x=iteration, y=x),
size=1) +
ylim(-3, 3) +
labs(title = 'Random-walk Metropolis',
x='iteration',
y='last position coordinate')+
theme(plot.title = element_text(size = 15, hjust = 0.5),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12),
panel.grid = element_blank(),
legend.position="none")
p2 <- ggplot() +
theme_bw() +
theme(panel.grid = element_blank()) +
geom_point(data=data2,
aes(x=iteration, y=x),
size=1) +
ylim(-3, 3) +
labs(title = 'Hamiltonian Monte Carlo',
x='iteration',
y='last position coordinate')+
theme(plot.title = element_text(size = 15, hjust = 0.5),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12),
panel.grid = element_blank(),
legend.position="none")
p1+p2
data1 <- data.frame(iteration=1:N, x=result1$q[, 100])
data2 <- data.frame(iteration=1:N, x=result2$q[, 100])
p1 <- ggplot() +
theme_bw() +
theme(panel.grid = element_blank()) +
geom_point(data=data1,
aes(x=iteration, y=x),
size=1) +
ylim(-3, 3) +
labs(title = 'Random-walk Metropolis',
x='iteration',
y='last position coordinate')+
theme(plot.title = element_text(size = 15, hjust = 0.5),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12),
panel.grid = element_blank(),
legend.position="none")
p2 <- ggplot() +
theme_bw() +
theme(panel.grid = element_blank()) +
geom_point(data=data2,
aes(x=iteration, y=x),
size=1) +
ylim(-3, 3) +
labs(title = 'Hamiltonian Monte Carlo',
x='iteration',
y='last position coordinate')+
theme(plot.title = element_text(size = 15, hjust = 0.5),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12),
panel.grid = element_blank(),
legend.position="none")
p1+p2
CompareMean <- data.frame(Sigma=Sigma,
MH=colMeans(result1$q),
HMC=colMeans(result2$q))
CompareSd <- data.frame(Sigma=Sigma,
MH=apply(result1$q, 2, sd),
HMC=apply(result2$q, 2, sd))
p1 <- ggplot(CompareMean, aes(x=Sigma, y=MH)) +
theme_bw() +
theme(panel.grid = element_blank()) +
geom_point(size=1) +
geom_hline(yintercept=0) +
ylim(-1, 1) +
labs(title = 'Random-walk Metropolis',
x='standard deviation of coordinate',
y='sample mean of coordinate')+
theme(plot.title = element_text(size = 15, hjust = 0.5),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12),
panel.grid = element_blank(),
legend.position="none")
p2 <- ggplot(CompareMean, aes(x=Sigma, y=HMC)) +
theme_bw() +
theme(panel.grid = element_blank()) +
geom_point(size=1) +
geom_hline(yintercept=0) +
ylim(-1, 1) +
labs(title = 'Hamiltonian Monte Carlo',
x='standard deviation of coordinate',
y='sample mean of coordinate')+
theme(plot.title = element_text(size = 15, hjust = 0.5),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12),
panel.grid = element_blank(),
legend.position="none")
p3 <- ggplot(CompareSd, aes(x=Sigma, y=MH)) +
theme_bw() +
theme(panel.grid = element_blank()) +
geom_point(size=1) +
geom_abline(slope=1, intercept=0) +
ylim(0, 1.2) +
labs(title = 'Random-walk Metropolis',
x='standard deviation of coordinate',
y='sample standard deviation of coordinate')+
theme(plot.title = element_text(size = 15, hjust = 0.5),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12),
panel.grid = element_blank(),
legend.position="none")
p4 <- ggplot(CompareSd, aes(x=Sigma, y=HMC)) +
theme_bw() +
theme(panel.grid = element_blank()) +
geom_point(size=1) +
geom_abline(slope=1, intercept=0) +
ylim(0, 1.2) +
labs(title = 'Hamiltonian Monte Carlo',
x='standard deviation of coordinate',
y='sample standard deviation of coordinate')+
theme(plot.title = element_text(size = 15, hjust = 0.5),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12),
panel.grid = element_blank(),
legend.position="none")
(p1+p2)/(p3+p4)
set.seed(20241206)
n <- 1000
y <- rnorm(n, 1, 5)
y_sum <- sum(y)
logTarget <- function(theta) {
return((theta[1]+theta[2]^2) * y_sum / 25 - n*(theta[1]+theta[2]^2)^2/50 - sum(theta^2) / 2)
}
glogTarget <- function(theta) {
g1 <- y_sum/25 - n*(theta[1]+theta[2]^2)/25-theta[1]
g2 <- 2*theta[2]*y_sum/25-2*n*theta[2]*(theta[1]+theta[2]^2)/25-theta[2]
return(c(g1, g2))
}
set.seed(20241208)
theta_init <- c(0, 0)
result_MH <- MH(N=200,
q_init=theta_init,
sigma=0.05,
L=20,
logTarget=logTarget)
result_MALA <- MALA(N=200,
q_init=theta_init,
sigma=0.05,
L=20,
logTarget=logTarget,
glogTarget=glogTarget)
result_HMC <- HMC(N=200,
q_init=theta_init,
delta=0.05,
L=20,
logTarget=logTarget,
glogTarget=glogTarget)
result_NUTS <- NUTS(N=200,
q_init=theta_init,
delta=0.05,
logTarget=logTarget,
glogTarget=glogTarget)
data_MH <- data.frame(result_MH$q)
colnames(data_MH) <- c("theta1", "theta2")
data_MALA <- data.frame(result_MALA$q)
colnames(data_MALA) <- c("theta1", "theta2")
data_HMC <- data.frame(result_HMC$q)
colnames(data_HMC) <- c("theta1", "theta2")
data_NUTS <- data.frame(result_NUTS)
colnames(data_NUTS) <- c("theta1", "theta2")
Target <- function(theta1, theta2) {
return(exp((theta1+theta2^2) * y_sum / 25 - n*(theta1+theta2^2)^2/50 - (theta1^2+theta2^2) / 2))
}
theta1 <- seq(-2, 2, length.out=200)
theta2 <- seq(-2, 2, length.out=200)
z <- outer(theta1, theta2, Target)
df <- data.frame(theta1=rep(theta1, times=200),
theta2=rep(theta2, each=200),
z=as.vector(z))
figure_target <- ggplot() +
theme_bw() +
geom_raster(data=df, aes(x=theta1,y=theta2,fill=z),interpolate=TRUE) +
scale_fill_gradientn(colors=brewer.pal(8, 'Blues')) +
labs(title='density', x='theta1', y='theta2', fill='density') +
xlim(-2, 2) +
ylim(-2, 2) +
theme(plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "#F7FBFF")) +
theme(plot.title = element_text(size = 15, hjust = 0.5),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12),
panel.grid = element_blank(),
legend.position="none")
figure_MH <- figure_target +
geom_point(data=data_MH,
aes(x=theta1, y=theta2),
size=0.5,
color="#FF7F00") +
labs(title = "MH")
figure_MALA <- figure_target +
geom_point(data=data_MALA,
aes(x=theta1, y=theta2),
size=0.5,
color="#FF7F00") +
labs(title = "MALA")
figure_HMC <- figure_target +
geom_point(data=data_HMC,
aes(x=theta1, y=theta2),
size=0.5,
color="#FF7F00") +
labs(title = "HMC")
figure_NUTS <- figure_target +
geom_point(data=data_NUTS,
aes(x=theta1, y=theta2),
size=0.5,
color="#FF7F00") +
labs(title = "NUTS")
(figure_MH + figure_MALA) / (figure_HMC + figure_NUTS)
